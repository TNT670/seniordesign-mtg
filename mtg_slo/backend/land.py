import itertools
import deckmath


def bestLands(manaCosts: list, totalDeckSize: int, debug: bool):
    # Returns the optimal number of lands for the given list of mana costs for
    # spells.
    
    numLandsNeeded = totalDeckSize - len(manaCosts)
    initLandSet = LsHeuristic(manaCosts,numLandsNeeded)
    if debug: print('LsHeuristic landSet: ',initLandSet)
    
    # Number of colors this deck uses
    numColors = sum([1 for c in initLandSet if c!=0])
    

    # If the deck only has one color, we do not need to search.
    if numColors == 1:
        return initLandSet
    
    landSets = getLandSets(numColors, numLandsNeeded,initLandSet,debug)
    landSets = castFilter(landSets,manaCosts,debug) 

    # Init search with heuristic case

    bestScore = deckmath.deckCastibility(manaCosts, initLandSet,totalDeckSize)
    bestLandSet = initLandSet.copy()

    if debug: print('\nScores:')    
    for thisLandCombo in landSets:
        thisDC = deckmath.deckCastibility(manaCosts, thisLandCombo,totalDeckSize)
        if (thisDC > bestScore):
            bestLandSet = thisLandCombo
            bestScore = thisDC
        if debug: print(thisLandCombo,'\t',thisDC)
    if debug: print('\nBest ', bestLandSet, bestScore)
    return bestLandSet


def castFilter(inputLandSets,manaCosts,debug):
    landSets = [cost[:] for cost in inputLandSets]
    # Drop landSets that make any card in our deck uncastable
    maxReqs=[]
    for c in range(5):
        maxReqs += [max([x[1][c] for x in manaCosts])]
    
    if debug: print('landSet minimums to cast every card\n',maxReqs,'\n',sep='')
    
    badLS = []
    for i,landSet in enumerate(landSets):
        for c in range(5): # for each color in the 5-tuple
            if landSet[c] < maxReqs[c]:
                badLS += [landSets[i][:]]
                landSets[i] = 0
                break # if one minimum not satisfied, whole lS is not satisfied
    landSets = list(filter(lambda x:x!=0,landSets))
    if debug:
        print(len(badLS),'uncastable landSets found and dropped')
        if len(badLS)!=0: 
            print('such as', badLS[len(badLS)//2], '\n')
        # printListOfLandSets(badLS)
        print('good post cast-filter landSets:')
        printListOfLandSets(landSets)
        
    return landSets


def getLandSets(numColors,numLandsNeeded,initLandSet,debug):
        # Recursive, in-place function to find some number of numColor-tuples,
    # where each sums to 17. 2 color example [ [0,17]-->[8,9] ]
    res = []
    landCombos = []
    deckmath.findLandCombos(numLandsNeeded, numColors, 0, 0, landCombos, res)
    

    # Get full set of landCombos by permuting and removing duplicates
    # 2 color example [ [0,17]-->[17,0] ]
    allLandCombos = []
    for ls in landCombos:
        allLandCombos += list(itertools.permutations(ls))
    allLandCombos = sorted(list(set(allLandCombos)))


    # Expand numColor-tuples into proper 5-tuples of lands
    # 2 color example [ [0,0,0,0,17]-->[0,0,0,17,0] ]
    landSets = []
    for lc in allLandCombos:
        thisLandCombo = [0, 0, 0, 0, 0]
        j = 0
        for i in range(len(thisLandCombo)):
            if initLandSet[i] != 0:
                thisLandCombo[i] = lc[j]
                j += 1
        landSets += [thisLandCombo]
    if debug:
        print('Initial landSets')
        print(landSets)
        printListOfLandSets(landSets)
        

    return landSets


def LsHeuristic(manaCosts: list, numLandsNeeded = 17):
    """ Returns a list representing the land set. The returned list should sum
        to the value of numLandsNeeded.
    
    Keyword Arguments:
        manaCosts: list of mana costs of the form (generic, (W,U,B,R,G)).
        numLandsNeeded: Total number of lands needed to complete the deck
    
    Example:
        manaCosts = [(2, (0,0,0,1,1)), (2, (0,0,0,1,0)), (2, (0,0,0,0,1)),
                     (1, (0,0,0,1,0)), (0, (0,0,0,1,1)), (1, (0,0,0,0,1)),
                     (0, (0,0,0,1,0)), (0, (0,0,0,0,1))]
        landSet = [0, 0, 0, 9, 9]
    """
    
    

    lands = [0,0,0,0,0]
    for elem in manaCosts:
        lands = [lands[i] + elem[1][i] for i in range(5)]
    landSet = [round(x * numLandsNeeded / sum(lands)) for x in lands]
    
    if sum(landSet) != numLandsNeeded:
        raise ValueError('Wrong number of lands generated by LsHeuristic: '+str(numLandsNeeded)+' expected, got: '+str(sum(landSet)),landSet)
    
    return landSet





def printListOfLandSets(theList:list, mode = 'row'):
    """ Given a list of landSets, print them in a way that
        is easier to comprehend than directly printing a list
        of many 5-tuples.

    Keyword Arguments:
        theList: list
            A list of lists/tuple. Each sublist is has five elements,
            and represents a landSet.
        mode: str
            Argument to determine what formatting of output to use.
                'row': Default value, concise single row format. [2-12, 2-12, 0, 0, 3-12]
                'col': Pretty print. Uses more lines for readability.

    """
    mins = [1000]*5
    maxs = [-1000]*5
    for thisLS in theList:
        for i in range(len(thisLS)):
            if thisLS[i] < mins[i]:
                mins[i] = thisLS[i]
            if thisLS[i] > maxs[i]:
                maxs[i] = thisLS[i]
    
    minMaxs = [(n,x) for n,x in zip(mins,maxs)]

    strMinMaxs = []
    for i,(n,x) in enumerate(minMaxs):
        s = str(n)+'/'+str(x)
        if n==0 and x==0:
            s = '0'
        if i != len(minMaxs)-1:
            s+=', '
        strMinMaxs += [s]
    

    if mode == 'row':
        print(len(theList),' landSets: ','[',''.join(strMinMaxs),']',sep='')
    
    elif mode == 'col':
        c = ['W','U','B','R','G']
        print(len(theList),'landSets given. Value ranges:')
        for i in range(len(strMinMaxs)):
            print('\t',c[i],'\t',strMinMaxs[i])
    else:
        raise ValueError("Unknown print-mode requested: '"+mode+"'")

    print()
    return